variables:
  IMAGE: $CI_REGISTRY_IMAGE/renovate:$CI_COMMIT_REF_SLUG
  NEW_IMAGE: $CI_REGISTRY_IMAGE/renovate-new:$CI_COMMIT_REF_SLUG

workflow:
  rules:
    # For merge requests, create a pipeline.
    - if: "$CI_MERGE_REQUEST_IID"
    # For `master` branch, create a pipeline (this includes on schedules, pushes, merges, etc.).
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"

stages:
  - test
  - build-image
  - run

.build-image:
  stage: build-image
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
  tags:
    - gitlab-org-docker
  resource_group: $CI_COMMIT_REF_SLUG-$DOCKER_IMAGE
  image: docker:20.10.18-git
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_CLI_EXPERIMENTAL: enabled
    DOCKER_BUILDKIT: "1"
  services:
    - docker:20.10.18-dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - |
      if docker manifest inspect $DOCKER_IMAGE >/dev/null; then
        echo "Image already exists"
        docker pull $DOCKER_IMAGE
        label=$(docker inspect --format='{{.Config.Labels.commitRef}}' $DOCKER_IMAGE)
        if [ "$label" == "$CI_COMMIT_SHORT_SHA" ]; then
          echo "Image has correct ref, so we skip building"
          exit 0
        fi
      fi
      echo "Building image"
      docker build . --file "$DOCKER_FILE" --tag "$DOCKER_IMAGE" --label commitRef=$CI_COMMIT_SHORT_SHA
      echo "Pushing image"
      docker push "$DOCKER_IMAGE"

build-image:
  extends: .build-image
  variables:
    DOCKER_IMAGE: $IMAGE
    DOCKER_FILE: "Dockerfile"

build-image-new:
  extends: .build-image
  variables:
    DOCKER_IMAGE: $NEW_IMAGE
    DOCKER_FILE: "new.Dockerfile"

.beep-boop:
  image: $DOCKER_IMAGE
  variables:
    GIT_STRATEGY: none
  stage: run
  resource_group: $CI_COMMIT_REF_SLUG-$CONFIG_DIR
  tags:
    - gitlab-org
  script:
    - cd /workdir/
    - ./run-renovate.sh "renovate/$CONFIG_DIR"
    - cp -r /workdir/renovate-log.txt $CI_PROJECT_DIR/renovate-log.txt
  artifacts:
    paths:
      - renovate-log.txt
    expire_in: 1 week
    public: false
    when: always

beep-boop:
  extends: .beep-boop
  variables:
    DOCKER_IMAGE: $IMAGE
    BINARY_SOURCE: global
  parallel:
    matrix:
      - CONFIG_DIR: [gitaly, gitlab, gitlab-docs, projects]

# beep-boop-new:
#   extends: .beep-boop
#   variables:
#     DOCKER_IMAGE: $NEW_IMAGE
#     BINARY_SOURCE: install
#   parallel:
#     matrix:
#       - CONFIG_DIR: []

delete-pipelines:
  image: $IMAGE
  variables:
    GIT_STRATEGY: none
  stage: run
  resource_group: $CI_COMMIT_REF_SLUG-cleanup
  tags:
    - gitlab-org
  script:
    - cd /workdir/
    - export "GITLAB_TOKEN=$DELETE_PIPELINES_TOKEN"
    - node ./scripts/delete-pipelines.js
  rules:
    - if: $DELETE_PIPELINES
